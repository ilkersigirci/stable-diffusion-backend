{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This site contains the project documentation for the <code>stable_diffusion_backend</code> project.</p>"},{"location":"#table-of-contents","title":"Table Of Contents","text":"<p>The documentation follows the best practice for project documentation as described by Daniele Procida in the Di\u00e1taxis documentation framework and consists of four separate parts:</p> <ol> <li>Tutorials</li> <li>How-To Guides</li> <li>Reference</li> <li>Explanation</li> </ol> <p>Quickly find what you're looking for depending on your use case by looking at the different pages.</p>"},{"location":"#mkdocs","title":"MkDocs","text":"<ul> <li>For full documentation visit mkdocs.org.</li> </ul> <pre><code># Create a new project.\nmkdocs new [dir-name]\n\n# Start the live-reloading docs server.\nmkdocs serve\n\n# Build the documentation site.\nmkdocs build\n\n# Print help message and exit.\nmkdocs -h\n</code></pre>"},{"location":"explanation/","title":"Explanation","text":"<p>This part of the project documentation focuses on an understanding-oriented approach. You'll get a chance to read about the background of the project, as well as reasoning about how it was implemented.</p> <p>Note: Expand this section by considering the following points:</p> <ul> <li>Give context and background on your library</li> <li>Explain why you created it</li> <li>Provide multiple examples and approaches of how     to work with it</li> <li>Help the reader make connections</li> <li>Avoid writing instructions or technical descriptions     here</li> </ul>"},{"location":"how-to-guides/","title":"How to guides","text":"<p>This part of the project documentation focuses on a problem-oriented approach. You'll tackle common tasks that you might have, with the help of the code provided in this project.</p>"},{"location":"poetry/","title":"Poetry","text":"<ul> <li> <p>All the documentation can be found here. Below are some of the commands that is  used frequently.</p> </li> <li> <p>Install (recommended)</p> </li> </ul> <pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre> <ul> <li>Add <code>zsh</code> auto completion</li> </ul> <pre><code>\n# Open `~/.zshrc` and add the following lines\nfpath+=~/.zfunc\nautoload -Uz compinit &amp;&amp; compinit\n\nsource ~/.zshrc\n\nmkdir ~/.zfunc\npoetry completions zsh &gt; ~/.zfunc/_poetry\nexec zsh\n</code></pre> <ul> <li>Uninstall</li> </ul> <pre><code>curl -sSL https://install.python-poetry.org | python3 - --uninstall\n</code></pre> <ul> <li>Update poetry</li> </ul> <pre><code>poetry self update\n</code></pre> <ul> <li><code>^2.1</code> equals to <code>&gt;=2.1.0 &lt;3.0.0</code></li> <li>It will automatically find a suitable version constraint and install the package and sub-dependencies.</li> </ul> <pre><code>poetry add &lt;package&gt;\n</code></pre> <ul> <li>Add package with specific version constraint</li> </ul> <pre><code>poetry add ruff==0.1.11\n</code></pre> <ul> <li>Add package from git</li> </ul> <pre><code>poetry add \"git+https://github.com/psf/black.git#main\"\n\n# With extras\npoetry add \"git+https://github.com/psf/black.git#main[d,jupyter]\"\n</code></pre> <ul> <li>If you have never run the command before and there is also no poetry.lock file present, Poetry simply resolves all dependencies listed in your pyproject.toml file and downloads the latest version of their files.</li> </ul> <pre><code>poetry install\n</code></pre> <ul> <li>Install is editable by default</li> <li>If you want to install the dependencies only, run the install command with the --no-root flag:</li> </ul> <pre><code>poetry install --no-root\n</code></pre> <ul> <li>Update dependencies and lock file. Equivalent to deleting the poetry.lock file and running install again</li> </ul> <pre><code>poetry update\n</code></pre> <ul> <li>Optional groups can be installed in addition to the default dependencies by using the --with option of the install command.</li> <li>Optional group dependencies will still be resolved alongside other dependencies, so special care should be taken to ensure they are compatible with each other.</li> </ul> <pre><code>poetry install --with others\n</code></pre> <p>-Adding a dependency to a group. If the group does not already exist, it will be created automatically</p> <pre><code>poetry add pytest --group test\n</code></pre> <ul> <li>By default, dependencies across all non-optional groups will be installed when executing <code>poetry install</code></li> <li>You can exclude one or more groups with the <code>--without</code> option</li> <li>When used together, <code>--without</code> takes precedence over <code>--with</code></li> </ul> <pre><code>poetry install --without test,docs\n</code></pre> <ul> <li>Install only specific groups of dependencies without installing the default set of dependencies</li> </ul> <pre><code>poetry install --only docs\n</code></pre> <ul> <li>If you only want to install the project\u2019s runtime dependencies, you can do so with the</li> </ul> <pre><code>poetry install --only main\n</code></pre> <ul> <li>If you want to install the project root, and no other dependencies, you can use the</li> </ul> <pre><code>poetry install --only-root\n</code></pre> <ul> <li>Removing dependencies from a group</li> </ul> <pre><code>poetry remove mkdocs --group docs\n</code></pre> <ul> <li>Synchronizing dependencies ensures that the locked dependencies in the poetry.lock file are the only ones present in the environment, removing anything that\u2019s not necessary.</li> </ul> <pre><code>poetry install --sync\n</code></pre> <ul> <li>To build the package</li> </ul> <pre><code>poetry build\n</code></pre> <ul> <li>To publish the package to private pypi</li> </ul> <pre><code>poetry publish -r private-pypi\n\n# Build and publish\npoetry publish --build -r private-pypi\n</code></pre> <ul> <li>List of configs</li> </ul> <pre><code>poetry config --list\n</code></pre> <ul> <li>Disable creating virtual environment</li> </ul> <pre><code>poetry config virtualenvs.create false\n</code></pre> <ul> <li>Clear cache</li> </ul> <pre><code>poetry cache clear . --all\n</code></pre> <ul> <li>To pin manually added dependencies from your pyproject.toml. The <code>poetry lock</code> command also updates your existing dependencies if newer versions that fit your version constraints are available</li> </ul> <pre><code>poetry lock\n</code></pre> <ul> <li>If you don\u2019t want to update any dependencies that are already in the poetry.lock file</li> </ul> <pre><code>poetry lock --no-update\n</code></pre> <ul> <li>When a new version of a dependency still fulfills your version constraints, you can use:</li> </ul> <pre><code>poetry update\n</code></pre> <p>The update command will update all your packages and their dependencies within their version constraints. Afterward, Poetry will update your poetry.lock file</p> <ul> <li>To update a specific package</li> </ul> <pre><code>poetry update &lt;package&gt;\n</code></pre> <p>Note that this will not update versions for dependencies outside their version constraints specified in the pyproject.toml file.</p> <ul> <li>Export to requirements.txt</li> </ul> <pre><code>poetry export --output requirements.txt\n</code></pre>"},{"location":"reference/","title":"Reference","text":"<p>This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the <code>stable_diffusion_backend</code> project code.</p>"},{"location":"reference/#stable_diffusion_backend.__main__","title":"__main__","text":""},{"location":"reference/#stable_diffusion_backend.__main__.main","title":"main","text":"<pre><code>main()\n</code></pre> <p>Entrypoint of the application.</p> Source code in <code>src/stable_diffusion_backend/__main__.py</code> <pre><code>def main() -&gt; None:\n    \"\"\"Entrypoint of the application.\"\"\"\n\n    uvicorn.run(\n        \"stable_diffusion_backend.app:create_app\",\n        workers=settings.workers_count,\n        host=settings.host,\n        port=settings.port,\n        reload=settings.reload,\n        log_level=settings.log_level.value.lower(),\n        factory=True,\n    )\n</code></pre>"},{"location":"reference/#stable_diffusion_backend.settings","title":"settings","text":""},{"location":"reference/#stable_diffusion_backend.settings.LogLevel","title":"LogLevel","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Possible log levels.</p>"},{"location":"tutorials/","title":"Tutorials","text":"<p>This part of the project documentation focuses on a learning-oriented approach. You'll learn how to get started with the code in this project.</p> <p>Note: Expand this section by considering the following points:</p> <ul> <li>Help newcomers with getting started</li> <li>Teach readers about your library by making them     write code</li> <li>Inspire confidence through examples that work for     everyone, repeatably</li> <li>Give readers an immediate sense of achievement</li> <li>Show concrete examples, no abstractions</li> <li>Provide the minimum necessary explanation</li> <li>Avoid any distractions</li> </ul>"}]}